-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Buffer_ADC is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    ADC_mem_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ADC_mem_ce1 : OUT STD_LOGIC;
    ADC_mem_we1 : OUT STD_LOGIC;
    ADC_mem_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ADC_Ready : IN STD_LOGIC_VECTOR (0 downto 0);
    ADC_buffer_cons_addr : IN STD_LOGIC_VECTOR (9 downto 0);
    ADC_buffer_prod_addr : OUT STD_LOGIC_VECTOR (9 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of Buffer_ADC is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Buffer_ADC_Buffer_ADC,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=1651,HLS_SYN_LUT=2006,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal DDR_size : STD_LOGIC_VECTOR (31 downto 0);
    signal DDR_cons_addr_ap_vld : STD_LOGIC;
    signal DDR_prod_addr : STD_LOGIC_VECTOR (31 downto 0);
    signal DDR_Ready : STD_LOGIC_VECTOR (31 downto 0);
    signal DDR_Master : STD_LOGIC_VECTOR (63 downto 0);
    signal ADC_buffer_error_i : STD_LOGIC_VECTOR (0 downto 0);
    signal ADC_buffer_error_o_ap_vld : STD_LOGIC;
    signal ADC_buffer_prod_addr_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ADC_buffer_cons_addr_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal DDR_cons_addr_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal DDR_Master_read_reg_543 : STD_LOGIC_VECTOR (63 downto 0);
    signal DDR_prod_addr_read_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal DDR_size_read_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal ADC_buffer_empty_error_3_fu_338_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ADC_buffer_empty_error_3_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_574 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_374_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln50_reg_579 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln50_1_fu_380_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_1_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal ADC_buffer_prod_addr_next_fu_387_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ADC_buffer_prod_addr_next_reg_591 : STD_LOGIC_VECTOR (9 downto 0);
    signal ADC_buffer_prod_addr_next_next_fu_393_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ADC_buffer_prod_addr_next_next_reg_596 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln63_1_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln63_1_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln64_1_reg_606 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln64_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln66_fu_513_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln66_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal ap_phi_mux_ADC_buffer_prod_addr_reg_flag_1_phi_fu_233_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ADC_buffer_prod_addr_reg_flag_1_reg_230 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_phi_mux_ADC_buffer_prod_addr_reg_new_1_phi_fu_244_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ADC_buffer_prod_addr_reg_new_1_reg_240 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_DDR_cons_addr_reg_new_1_phi_fu_255_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal DDR_cons_addr_reg_new_1_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_0_0_0185_phi_fu_265_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0_0_0185_reg_262 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_p_0_0_0186_phi_fu_275_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_0_0186_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln64_1_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln64_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln46_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_1_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ADC_buffer_empty_error_1_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ADC_buffer_empty_error_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ADC_buffer_empty_error_2_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_1_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal DDR_empty_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln63_2_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln63_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln63_1_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln63_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln63_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_448_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln64_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln64_fu_460_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln66_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln66_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Buffer_ADC_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        DDR_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        DDR_cons_addr : IN STD_LOGIC_VECTOR (31 downto 0);
        DDR_cons_addr_ap_vld : IN STD_LOGIC;
        DDR_prod_addr : OUT STD_LOGIC_VECTOR (31 downto 0);
        DDR_Ready : OUT STD_LOGIC_VECTOR (31 downto 0);
        DDR_Master : OUT STD_LOGIC_VECTOR (63 downto 0);
        ADC_buffer_error_o : IN STD_LOGIC_VECTOR (0 downto 0);
        ADC_buffer_error_o_ap_vld : IN STD_LOGIC;
        ADC_buffer_error_i : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Buffer_ADC_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component Buffer_ADC_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        DDR_size => DDR_size,
        DDR_cons_addr => ap_phi_mux_p_0_0_0186_phi_fu_275_p4,
        DDR_cons_addr_ap_vld => DDR_cons_addr_ap_vld,
        DDR_prod_addr => DDR_prod_addr,
        DDR_Ready => DDR_Ready,
        DDR_Master => DDR_Master,
        ADC_buffer_error_o => ADC_buffer_empty_error_3_reg_561,
        ADC_buffer_error_o_ap_vld => ADC_buffer_error_o_ap_vld,
        ADC_buffer_error_i => ADC_buffer_error_i);

    gmem_m_axi_U : component Buffer_ADC_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 64,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => sext_ln64_fu_475_p1,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ADC_buffer_prod_addr_reg_flag_1_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln63_1_fu_443_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ADC_buffer_prod_addr_reg_flag_1_reg_230 <= or_ln50_reg_567;
            elsif (((ap_const_lv1_1 = and_ln63_1_reg_602) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                ADC_buffer_prod_addr_reg_flag_1_reg_230 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    ADC_buffer_prod_addr_reg_new_1_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln63_1_fu_443_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ADC_buffer_prod_addr_reg_new_1_reg_240 <= ap_const_lv10_0;
            elsif (((ap_const_lv1_1 = and_ln63_1_reg_602) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                ADC_buffer_prod_addr_reg_new_1_reg_240 <= ADC_buffer_prod_addr_next_next_reg_596;
            end if; 
        end if;
    end process;

    DDR_cons_addr_reg_new_1_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln63_1_fu_443_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                DDR_cons_addr_reg_new_1_reg_251 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = and_ln63_1_reg_602) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                DDR_cons_addr_reg_new_1_reg_251 <= select_ln66_reg_627;
            end if; 
        end if;
    end process;

    p_0_0_0185_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln63_1_fu_443_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0_0_0185_reg_262 <= select_ln50_fu_374_p3;
            elsif (((ap_const_lv1_1 = and_ln63_1_reg_602) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                p_0_0_0185_reg_262 <= ADC_buffer_prod_addr_next_next_reg_596;
            end if; 
        end if;
    end process;

    p_0_0_0186_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln63_1_fu_443_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0_0_0186_reg_272 <= select_ln50_1_fu_380_p3;
            elsif (((ap_const_lv1_1 = and_ln63_1_reg_602) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                p_0_0_0186_reg_272 <= select_ln66_reg_627;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                ADC_buffer_cons_addr_reg <= ADC_buffer_cons_addr;
                ADC_buffer_empty_error_3_reg_561 <= ADC_buffer_empty_error_3_fu_338_p3;
                DDR_Master_read_reg_543 <= DDR_Master;
                DDR_prod_addr_read_reg_548 <= DDR_prod_addr;
                DDR_size_read_reg_553 <= DDR_size;
                icmp_ln63_reg_574 <= icmp_ln63_fu_364_p2;
                or_ln50_reg_567 <= or_ln50_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ADC_buffer_prod_addr_next_next_reg_596 <= ADC_buffer_prod_addr_next_next_fu_393_p2;
                ADC_buffer_prod_addr_next_reg_591 <= ADC_buffer_prod_addr_next_fu_387_p2;
                and_ln63_1_reg_602 <= and_ln63_1_fu_443_p2;
                select_ln50_1_reg_585 <= select_ln50_1_fu_380_p3;
                select_ln50_reg_579 <= select_ln50_fu_374_p3;
                trunc_ln64_1_reg_606 <= add_ln64_fu_460_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_ADC_buffer_prod_addr_reg_flag_1_phi_fu_233_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                ADC_buffer_prod_addr_reg <= ap_phi_mux_ADC_buffer_prod_addr_reg_new_1_phi_fu_244_p4;
                DDR_cons_addr_reg <= ap_phi_mux_DDR_cons_addr_reg_new_1_phi_fu_255_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                select_ln66_reg_627 <= select_ln66_fu_513_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln1_reg_622 <= gmem_RDATA(63 downto 32);
                trunc_ln64_reg_617 <= trunc_ln64_fu_485_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state2, and_ln63_1_fu_443_p2, gmem_ARREADY, gmem_RVALID)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_lv1_0 = and_ln63_1_fu_443_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ADC_buffer_empty_error_1_fu_314_p2 <= (icmp_ln46_fu_296_p2 and icmp_ln46_1_fu_302_p2);
    ADC_buffer_empty_error_2_fu_320_p2 <= (ADC_buffer_error_i or ADC_buffer_empty_error_1_fu_314_p2);
    ADC_buffer_empty_error_3_fu_338_p3 <= 
        ADC_buffer_empty_error_fu_308_p2 when (and_ln43_fu_332_p2(0) = '1') else 
        ADC_buffer_empty_error_2_fu_320_p2;
    ADC_buffer_empty_error_fu_308_p2 <= (icmp_ln46_fu_296_p2 or icmp_ln46_1_fu_302_p2);

    ADC_buffer_error_o_ap_vld_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ADC_buffer_error_o_ap_vld <= ap_const_logic_1;
        else 
            ADC_buffer_error_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ADC_buffer_prod_addr <= ap_phi_mux_p_0_0_0185_phi_fu_265_p4;
    ADC_buffer_prod_addr_next_fu_387_p2 <= std_logic_vector(unsigned(select_ln50_fu_374_p3) + unsigned(ap_const_lv10_1));
    ADC_buffer_prod_addr_next_next_fu_393_p2 <= std_logic_vector(unsigned(select_ln50_fu_374_p3) + unsigned(ap_const_lv10_2));

    ADC_mem_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, zext_ln64_1_fu_499_p1, zext_ln65_fu_521_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ADC_mem_address1 <= zext_ln65_fu_521_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ADC_mem_address1 <= zext_ln64_1_fu_499_p1(11 - 1 downto 0);
        else 
            ADC_mem_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    ADC_mem_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ADC_mem_ce1 <= ap_const_logic_1;
        else 
            ADC_mem_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ADC_mem_d1_assign_proc : process(trunc_ln64_reg_617, trunc_ln1_reg_622, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ADC_mem_d1 <= trunc_ln1_reg_622;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ADC_mem_d1 <= trunc_ln64_reg_617;
        else 
            ADC_mem_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ADC_mem_we1_assign_proc : process(and_ln63_1_reg_602, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_lv1_1 = and_ln63_1_reg_602) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            ADC_mem_we1 <= ap_const_logic_1;
        else 
            ADC_mem_we1 <= ap_const_logic_0;
        end if; 
    end process;


    DDR_cons_addr_ap_vld_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            DDR_cons_addr_ap_vld <= ap_const_logic_1;
        else 
            DDR_cons_addr_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    DDR_empty_fu_409_p2 <= "1" when (select_ln50_1_fu_380_p3 = DDR_prod_addr_read_reg_548) else "0";
    add_ln64_fu_460_p2 <= std_logic_vector(unsigned(zext_ln64_fu_456_p1) + unsigned(DDR_Master_read_reg_543));
    add_ln66_fu_503_p2 <= std_logic_vector(unsigned(select_ln50_1_reg_585) + unsigned(ap_const_lv32_1));
    and_ln43_fu_332_p2 <= (xor_ln40_fu_326_p2 and icmp_ln43_fu_290_p2);
    and_ln63_1_fu_443_p2 <= (icmp_ln63_reg_574 and and_ln63_fu_437_p2);
    and_ln63_fu_437_p2 <= (xor_ln63_fu_431_p2 and ADC_Ready);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_phi_mux_ADC_buffer_prod_addr_reg_flag_1_phi_fu_233_p4_assign_proc : process(and_ln63_1_reg_602, ADC_buffer_prod_addr_reg_flag_1_reg_230, ap_CS_fsm_state13)
    begin
        if (((ap_const_lv1_1 = and_ln63_1_reg_602) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_phi_mux_ADC_buffer_prod_addr_reg_flag_1_phi_fu_233_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_ADC_buffer_prod_addr_reg_flag_1_phi_fu_233_p4 <= ADC_buffer_prod_addr_reg_flag_1_reg_230;
        end if; 
    end process;


    ap_phi_mux_ADC_buffer_prod_addr_reg_new_1_phi_fu_244_p4_assign_proc : process(ADC_buffer_prod_addr_next_next_reg_596, and_ln63_1_reg_602, ap_CS_fsm_state13, ADC_buffer_prod_addr_reg_new_1_reg_240)
    begin
        if (((ap_const_lv1_1 = and_ln63_1_reg_602) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_phi_mux_ADC_buffer_prod_addr_reg_new_1_phi_fu_244_p4 <= ADC_buffer_prod_addr_next_next_reg_596;
        else 
            ap_phi_mux_ADC_buffer_prod_addr_reg_new_1_phi_fu_244_p4 <= ADC_buffer_prod_addr_reg_new_1_reg_240;
        end if; 
    end process;


    ap_phi_mux_DDR_cons_addr_reg_new_1_phi_fu_255_p4_assign_proc : process(and_ln63_1_reg_602, select_ln66_reg_627, ap_CS_fsm_state13, DDR_cons_addr_reg_new_1_reg_251)
    begin
        if (((ap_const_lv1_1 = and_ln63_1_reg_602) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_phi_mux_DDR_cons_addr_reg_new_1_phi_fu_255_p4 <= select_ln66_reg_627;
        else 
            ap_phi_mux_DDR_cons_addr_reg_new_1_phi_fu_255_p4 <= DDR_cons_addr_reg_new_1_reg_251;
        end if; 
    end process;


    ap_phi_mux_p_0_0_0185_phi_fu_265_p4_assign_proc : process(ADC_buffer_prod_addr_next_next_reg_596, and_ln63_1_reg_602, ap_CS_fsm_state13, p_0_0_0185_reg_262)
    begin
        if (((ap_const_lv1_1 = and_ln63_1_reg_602) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_phi_mux_p_0_0_0185_phi_fu_265_p4 <= ADC_buffer_prod_addr_next_next_reg_596;
        else 
            ap_phi_mux_p_0_0_0185_phi_fu_265_p4 <= p_0_0_0185_reg_262;
        end if; 
    end process;


    ap_phi_mux_p_0_0_0186_phi_fu_275_p4_assign_proc : process(and_ln63_1_reg_602, select_ln66_reg_627, ap_CS_fsm_state13, p_0_0_0186_reg_272)
    begin
        if (((ap_const_lv1_1 = and_ln63_1_reg_602) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_phi_mux_p_0_0_0186_phi_fu_275_p4 <= select_ln66_reg_627;
        else 
            ap_phi_mux_p_0_0_0186_phi_fu_275_p4 <= p_0_0_0186_reg_272;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state3, gmem_ARREADY)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state11, gmem_RVALID)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln43_fu_290_p2 <= "1" when (unsigned(ADC_buffer_prod_addr_reg) > unsigned(ADC_buffer_cons_addr_reg)) else "0";
    icmp_ln46_1_fu_302_p2 <= "1" when (unsigned(ADC_buffer_prod_addr_reg) < unsigned(ADC_buffer_cons_addr)) else "0";
    icmp_ln46_fu_296_p2 <= "1" when (unsigned(ADC_buffer_cons_addr_reg) > unsigned(ADC_buffer_cons_addr)) else "0";
    icmp_ln50_fu_346_p2 <= "1" when (DDR_Ready = ap_const_lv32_0) else "0";
    icmp_ln60_1_fu_404_p2 <= "1" when (ADC_buffer_prod_addr_next_next_fu_393_p2 = ADC_buffer_cons_addr) else "0";
    icmp_ln60_fu_399_p2 <= "1" when (ADC_buffer_prod_addr_next_fu_387_p2 = ADC_buffer_cons_addr) else "0";
    icmp_ln63_fu_364_p2 <= "0" when (DDR_Ready = ap_const_lv32_0) else "1";
    icmp_ln66_fu_508_p2 <= "1" when (add_ln66_fu_503_p2 = DDR_size_read_reg_553) else "0";
    or_ln50_fu_352_p2 <= (icmp_ln50_fu_346_p2 or ADC_buffer_empty_error_3_fu_338_p3);
    or_ln63_1_fu_425_p2 <= (or_ln63_fu_414_p2 or or_ln63_2_fu_420_p2);
    or_ln63_2_fu_420_p2 <= (DDR_empty_fu_409_p2 or ADC_buffer_empty_error_3_reg_561);
    or_ln63_fu_414_p2 <= (icmp_ln60_fu_399_p2 or icmp_ln60_1_fu_404_p2);
    select_ln50_1_fu_380_p3 <= 
        ap_const_lv32_0 when (or_ln50_reg_567(0) = '1') else 
        DDR_cons_addr_reg;
    select_ln50_fu_374_p3 <= 
        ap_const_lv10_0 when (or_ln50_reg_567(0) = '1') else 
        ADC_buffer_prod_addr_reg;
    select_ln66_fu_513_p3 <= 
        ap_const_lv32_0 when (icmp_ln66_fu_508_p2(0) = '1') else 
        add_ln66_fu_503_p2;
        sext_ln64_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln64_1_reg_606),64));

    shl_ln_fu_448_p3 <= (select_ln50_1_fu_380_p3 & ap_const_lv3_0);
    trunc_ln64_fu_485_p1 <= gmem_RDATA(32 - 1 downto 0);
    xor_ln40_fu_326_p2 <= (ap_const_lv1_1 xor ADC_buffer_error_i);
    xor_ln63_fu_431_p2 <= (or_ln63_1_fu_425_p2 xor ap_const_lv1_1);
    zext_ln64_1_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_reg_579),64));
    zext_ln64_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_448_p3),64));
    zext_ln65_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ADC_buffer_prod_addr_next_reg_591),64));
end behav;
