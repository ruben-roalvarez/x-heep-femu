// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Buffer_ADC_Buffer_ADC,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=1651,HLS_SYN_LUT=2006,HLS_VERSION=2023_2}" *)

module Buffer_ADC (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        ADC_mem_address1,
        ADC_mem_ce1,
        ADC_mem_we1,
        ADC_mem_d1,
        ADC_Ready,
        ADC_buffer_cons_addr,
        ADC_buffer_prod_addr,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 64;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [10:0] ADC_mem_address1;
output   ADC_mem_ce1;
output   ADC_mem_we1;
output  [31:0] ADC_mem_d1;
input  [0:0] ADC_Ready;
input  [9:0] ADC_buffer_cons_addr;
output  [9:0] ADC_buffer_prod_addr;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg[10:0] ADC_mem_address1;
reg ADC_mem_ce1;
reg ADC_mem_we1;
reg[31:0] ADC_mem_d1;

 reg    ap_rst_n_inv;
wire   [31:0] DDR_size;
reg    DDR_cons_addr_ap_vld;
wire   [31:0] DDR_prod_addr;
wire   [31:0] DDR_Ready;
wire   [63:0] DDR_Master;
wire   [0:0] ADC_buffer_error_i;
reg    ADC_buffer_error_o_ap_vld;
reg   [9:0] ADC_buffer_prod_addr_reg;
reg   [9:0] ADC_buffer_cons_addr_reg;
reg   [31:0] DDR_cons_addr_reg;
reg    gmem_blk_n_AR;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state1;
reg   [63:0] DDR_Master_read_reg_543;
reg   [31:0] DDR_prod_addr_read_reg_548;
reg   [31:0] DDR_size_read_reg_553;
wire   [0:0] ADC_buffer_empty_error_3_fu_338_p3;
reg   [0:0] ADC_buffer_empty_error_3_reg_561;
wire   [0:0] or_ln50_fu_352_p2;
reg   [0:0] or_ln50_reg_567;
wire   [0:0] icmp_ln63_fu_364_p2;
reg   [0:0] icmp_ln63_reg_574;
wire   [9:0] select_ln50_fu_374_p3;
reg   [9:0] select_ln50_reg_579;
wire    ap_CS_fsm_state2;
wire   [31:0] select_ln50_1_fu_380_p3;
reg   [31:0] select_ln50_1_reg_585;
wire   [9:0] ADC_buffer_prod_addr_next_fu_387_p2;
reg   [9:0] ADC_buffer_prod_addr_next_reg_591;
wire   [9:0] ADC_buffer_prod_addr_next_next_fu_393_p2;
reg   [9:0] ADC_buffer_prod_addr_next_next_reg_596;
wire   [0:0] and_ln63_1_fu_443_p2;
reg   [0:0] and_ln63_1_reg_602;
reg   [60:0] trunc_ln64_1_reg_606;
wire   [31:0] trunc_ln64_fu_485_p1;
reg   [31:0] trunc_ln64_reg_617;
reg   [31:0] trunc_ln1_reg_622;
wire   [31:0] select_ln66_fu_513_p3;
reg   [31:0] select_ln66_reg_627;
wire    ap_CS_fsm_state12;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [63:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg   [0:0] ap_phi_mux_ADC_buffer_prod_addr_reg_flag_1_phi_fu_233_p4;
reg   [0:0] ADC_buffer_prod_addr_reg_flag_1_reg_230;
wire    ap_CS_fsm_state13;
reg   [9:0] ap_phi_mux_ADC_buffer_prod_addr_reg_new_1_phi_fu_244_p4;
reg   [9:0] ADC_buffer_prod_addr_reg_new_1_reg_240;
reg   [31:0] ap_phi_mux_DDR_cons_addr_reg_new_1_phi_fu_255_p4;
reg   [31:0] DDR_cons_addr_reg_new_1_reg_251;
reg   [9:0] ap_phi_mux_p_0_0_0185_phi_fu_265_p4;
reg   [9:0] p_0_0_0185_reg_262;
reg   [31:0] ap_phi_mux_p_0_0_0186_phi_fu_275_p4;
reg   [31:0] p_0_0_0186_reg_272;
wire   [63:0] zext_ln64_1_fu_499_p1;
wire   [63:0] zext_ln65_fu_521_p1;
wire   [63:0] sext_ln64_fu_475_p1;
wire   [0:0] icmp_ln46_fu_296_p2;
wire   [0:0] icmp_ln46_1_fu_302_p2;
wire   [0:0] ADC_buffer_empty_error_1_fu_314_p2;
wire   [0:0] icmp_ln43_fu_290_p2;
wire   [0:0] xor_ln40_fu_326_p2;
wire   [0:0] and_ln43_fu_332_p2;
wire   [0:0] ADC_buffer_empty_error_fu_308_p2;
wire   [0:0] ADC_buffer_empty_error_2_fu_320_p2;
wire   [0:0] icmp_ln50_fu_346_p2;
wire   [0:0] icmp_ln60_fu_399_p2;
wire   [0:0] icmp_ln60_1_fu_404_p2;
wire   [0:0] DDR_empty_fu_409_p2;
wire   [0:0] or_ln63_2_fu_420_p2;
wire   [0:0] or_ln63_fu_414_p2;
wire   [0:0] or_ln63_1_fu_425_p2;
wire   [0:0] xor_ln63_fu_431_p2;
wire   [0:0] and_ln63_fu_437_p2;
wire   [34:0] shl_ln_fu_448_p3;
wire   [63:0] zext_ln64_fu_456_p1;
wire   [63:0] add_ln64_fu_460_p2;
wire   [31:0] add_ln66_fu_503_p2;
wire   [0:0] icmp_ln66_fu_508_p2;
reg   [12:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ADC_buffer_prod_addr_reg = 10'd0;
#0 ADC_buffer_cons_addr_reg = 10'd0;
#0 DDR_cons_addr_reg = 32'd0;
#0 ap_CS_fsm = 13'd1;
end

Buffer_ADC_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .DDR_size(DDR_size),
    .DDR_cons_addr(ap_phi_mux_p_0_0_0186_phi_fu_275_p4),
    .DDR_cons_addr_ap_vld(DDR_cons_addr_ap_vld),
    .DDR_prod_addr(DDR_prod_addr),
    .DDR_Ready(DDR_Ready),
    .DDR_Master(DDR_Master),
    .ADC_buffer_error_o(ADC_buffer_empty_error_3_reg_561),
    .ADC_buffer_error_o_ap_vld(ADC_buffer_error_o_ap_vld),
    .ADC_buffer_error_i(ADC_buffer_error_i)
);

Buffer_ADC_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(sext_ln64_fu_475_p1),
    .I_ARLEN(32'd1),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(64'd0),
    .I_WSTRB(8'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln63_1_fu_443_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        ADC_buffer_prod_addr_reg_flag_1_reg_230 <= or_ln50_reg_567;
    end else if (((1'd1 == and_ln63_1_reg_602) & (1'b1 == ap_CS_fsm_state13))) begin
        ADC_buffer_prod_addr_reg_flag_1_reg_230 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln63_1_fu_443_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        ADC_buffer_prod_addr_reg_new_1_reg_240 <= 10'd0;
    end else if (((1'd1 == and_ln63_1_reg_602) & (1'b1 == ap_CS_fsm_state13))) begin
        ADC_buffer_prod_addr_reg_new_1_reg_240 <= ADC_buffer_prod_addr_next_next_reg_596;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln63_1_fu_443_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        DDR_cons_addr_reg_new_1_reg_251 <= 32'd0;
    end else if (((1'd1 == and_ln63_1_reg_602) & (1'b1 == ap_CS_fsm_state13))) begin
        DDR_cons_addr_reg_new_1_reg_251 <= select_ln66_reg_627;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln63_1_fu_443_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0_0_0185_reg_262 <= select_ln50_fu_374_p3;
    end else if (((1'd1 == and_ln63_1_reg_602) & (1'b1 == ap_CS_fsm_state13))) begin
        p_0_0_0185_reg_262 <= ADC_buffer_prod_addr_next_next_reg_596;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln63_1_fu_443_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0_0_0186_reg_272 <= select_ln50_1_fu_380_p3;
    end else if (((1'd1 == and_ln63_1_reg_602) & (1'b1 == ap_CS_fsm_state13))) begin
        p_0_0_0186_reg_272 <= select_ln66_reg_627;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ADC_buffer_cons_addr_reg <= ADC_buffer_cons_addr;
        ADC_buffer_empty_error_3_reg_561 <= ADC_buffer_empty_error_3_fu_338_p3;
        DDR_Master_read_reg_543 <= DDR_Master;
        DDR_prod_addr_read_reg_548 <= DDR_prod_addr;
        DDR_size_read_reg_553 <= DDR_size;
        icmp_ln63_reg_574 <= icmp_ln63_fu_364_p2;
        or_ln50_reg_567 <= or_ln50_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ADC_buffer_prod_addr_next_next_reg_596 <= ADC_buffer_prod_addr_next_next_fu_393_p2;
        ADC_buffer_prod_addr_next_reg_591 <= ADC_buffer_prod_addr_next_fu_387_p2;
        and_ln63_1_reg_602 <= and_ln63_1_fu_443_p2;
        select_ln50_1_reg_585 <= select_ln50_1_fu_380_p3;
        select_ln50_reg_579 <= select_ln50_fu_374_p3;
        trunc_ln64_1_reg_606 <= {{add_ln64_fu_460_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_ADC_buffer_prod_addr_reg_flag_1_phi_fu_233_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ADC_buffer_prod_addr_reg <= ap_phi_mux_ADC_buffer_prod_addr_reg_new_1_phi_fu_244_p4;
        DDR_cons_addr_reg <= ap_phi_mux_DDR_cons_addr_reg_new_1_phi_fu_255_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        select_ln66_reg_627 <= select_ln66_fu_513_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        trunc_ln1_reg_622 <= {{gmem_RDATA[63:32]}};
        trunc_ln64_reg_617 <= trunc_ln64_fu_485_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ADC_buffer_error_o_ap_vld = 1'b1;
    end else begin
        ADC_buffer_error_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ADC_mem_address1 = zext_ln65_fu_521_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ADC_mem_address1 = zext_ln64_1_fu_499_p1;
    end else begin
        ADC_mem_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        ADC_mem_ce1 = 1'b1;
    end else begin
        ADC_mem_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ADC_mem_d1 = trunc_ln1_reg_622;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ADC_mem_d1 = trunc_ln64_reg_617;
    end else begin
        ADC_mem_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'd1 == and_ln63_1_reg_602) & (1'b1 == ap_CS_fsm_state13)))) begin
        ADC_mem_we1 = 1'b1;
    end else begin
        ADC_mem_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        DDR_cons_addr_ap_vld = 1'b1;
    end else begin
        DDR_cons_addr_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'd1 == and_ln63_1_reg_602) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_phi_mux_ADC_buffer_prod_addr_reg_flag_1_phi_fu_233_p4 = 1'd1;
    end else begin
        ap_phi_mux_ADC_buffer_prod_addr_reg_flag_1_phi_fu_233_p4 = ADC_buffer_prod_addr_reg_flag_1_reg_230;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln63_1_reg_602) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_phi_mux_ADC_buffer_prod_addr_reg_new_1_phi_fu_244_p4 = ADC_buffer_prod_addr_next_next_reg_596;
    end else begin
        ap_phi_mux_ADC_buffer_prod_addr_reg_new_1_phi_fu_244_p4 = ADC_buffer_prod_addr_reg_new_1_reg_240;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln63_1_reg_602) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_phi_mux_DDR_cons_addr_reg_new_1_phi_fu_255_p4 = select_ln66_reg_627;
    end else begin
        ap_phi_mux_DDR_cons_addr_reg_new_1_phi_fu_255_p4 = DDR_cons_addr_reg_new_1_reg_251;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln63_1_reg_602) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_phi_mux_p_0_0_0185_phi_fu_265_p4 = ADC_buffer_prod_addr_next_next_reg_596;
    end else begin
        ap_phi_mux_p_0_0_0185_phi_fu_265_p4 = p_0_0_0185_reg_262;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln63_1_reg_602) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_phi_mux_p_0_0_0186_phi_fu_275_p4 = select_ln66_reg_627;
    end else begin
        ap_phi_mux_p_0_0_0186_phi_fu_275_p4 = p_0_0_0186_reg_272;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'd0 == and_ln63_1_fu_443_p2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ADC_buffer_empty_error_1_fu_314_p2 = (icmp_ln46_fu_296_p2 & icmp_ln46_1_fu_302_p2);

assign ADC_buffer_empty_error_2_fu_320_p2 = (ADC_buffer_error_i | ADC_buffer_empty_error_1_fu_314_p2);

assign ADC_buffer_empty_error_3_fu_338_p3 = ((and_ln43_fu_332_p2[0:0] == 1'b1) ? ADC_buffer_empty_error_fu_308_p2 : ADC_buffer_empty_error_2_fu_320_p2);

assign ADC_buffer_empty_error_fu_308_p2 = (icmp_ln46_fu_296_p2 | icmp_ln46_1_fu_302_p2);

assign ADC_buffer_prod_addr = ap_phi_mux_p_0_0_0185_phi_fu_265_p4;

assign ADC_buffer_prod_addr_next_fu_387_p2 = (select_ln50_fu_374_p3 + 10'd1);

assign ADC_buffer_prod_addr_next_next_fu_393_p2 = (select_ln50_fu_374_p3 + 10'd2);

assign DDR_empty_fu_409_p2 = ((select_ln50_1_fu_380_p3 == DDR_prod_addr_read_reg_548) ? 1'b1 : 1'b0);

assign add_ln64_fu_460_p2 = (zext_ln64_fu_456_p1 + DDR_Master_read_reg_543);

assign add_ln66_fu_503_p2 = (select_ln50_1_reg_585 + 32'd1);

assign and_ln43_fu_332_p2 = (xor_ln40_fu_326_p2 & icmp_ln43_fu_290_p2);

assign and_ln63_1_fu_443_p2 = (icmp_ln63_reg_574 & and_ln63_fu_437_p2);

assign and_ln63_fu_437_p2 = (xor_ln63_fu_431_p2 & ADC_Ready);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln43_fu_290_p2 = ((ADC_buffer_prod_addr_reg > ADC_buffer_cons_addr_reg) ? 1'b1 : 1'b0);

assign icmp_ln46_1_fu_302_p2 = ((ADC_buffer_prod_addr_reg < ADC_buffer_cons_addr) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_296_p2 = ((ADC_buffer_cons_addr_reg > ADC_buffer_cons_addr) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_346_p2 = ((DDR_Ready == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln60_1_fu_404_p2 = ((ADC_buffer_prod_addr_next_next_fu_393_p2 == ADC_buffer_cons_addr) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_399_p2 = ((ADC_buffer_prod_addr_next_fu_387_p2 == ADC_buffer_cons_addr) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_364_p2 = ((DDR_Ready != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_508_p2 = ((add_ln66_fu_503_p2 == DDR_size_read_reg_553) ? 1'b1 : 1'b0);

assign or_ln50_fu_352_p2 = (icmp_ln50_fu_346_p2 | ADC_buffer_empty_error_3_fu_338_p3);

assign or_ln63_1_fu_425_p2 = (or_ln63_fu_414_p2 | or_ln63_2_fu_420_p2);

assign or_ln63_2_fu_420_p2 = (DDR_empty_fu_409_p2 | ADC_buffer_empty_error_3_reg_561);

assign or_ln63_fu_414_p2 = (icmp_ln60_fu_399_p2 | icmp_ln60_1_fu_404_p2);

assign select_ln50_1_fu_380_p3 = ((or_ln50_reg_567[0:0] == 1'b1) ? 32'd0 : DDR_cons_addr_reg);

assign select_ln50_fu_374_p3 = ((or_ln50_reg_567[0:0] == 1'b1) ? 10'd0 : ADC_buffer_prod_addr_reg);

assign select_ln66_fu_513_p3 = ((icmp_ln66_fu_508_p2[0:0] == 1'b1) ? 32'd0 : add_ln66_fu_503_p2);

assign sext_ln64_fu_475_p1 = $signed(trunc_ln64_1_reg_606);

assign shl_ln_fu_448_p3 = {{select_ln50_1_fu_380_p3}, {3'd0}};

assign trunc_ln64_fu_485_p1 = gmem_RDATA[31:0];

assign xor_ln40_fu_326_p2 = (1'd1 ^ ADC_buffer_error_i);

assign xor_ln63_fu_431_p2 = (or_ln63_1_fu_425_p2 ^ 1'd1);

assign zext_ln64_1_fu_499_p1 = select_ln50_reg_579;

assign zext_ln64_fu_456_p1 = shl_ln_fu_448_p3;

assign zext_ln65_fu_521_p1 = ADC_buffer_prod_addr_next_reg_591;

endmodule //Buffer_ADC
